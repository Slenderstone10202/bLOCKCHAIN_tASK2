pragma solidity >=0.8.4;

contract hotel_reservation{
    
    uint rf, c7, c2;
    address owner;
    event reg(address guest, uint day, uint month, uint year);
    event can(address guest, uint day, uint month, uint year);
    mapping (uint=>uint) private perday; 
    mapping (address=>uint) private has_cancelled;
    mapping (address=>uint) private balance;
    
    constructor()
    { rf = 10000;
        c7 = 50;
        c2 = 0;
        owner = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;}
    
    
    function is_leap(uint year) pure private returns (bool){    //Was not able to do this function all on my own had to take help
        if(year%4==0){
            if(year%100==0 && year%400!=0){
                return false;
            }
            return true;
        }
        return false;
    }
    
    function daysinmnt(uint month, uint year) pure private returns (uint){
        uint[13] memory day;
        day[1] = 31;
        day[2] = 28;
        day[3] = 31;
        day[4] = 30;
        day[5] = 31;
        day[6] = 30;
        day[7] = 31;
        day[8] = 31;
        day[9] = 30;
        day[10] = 31;
        day[11] = 30;
        day[12] = 31;
        if(is_leap(year)==true)
            day[2] = 29;
        return day[month];
    }
    
    function num_of_days(uint year, uint month, uint date) pure private returns (uint){
        uint sum;
        sum = (year-1970)*365 + (year-1972)/4 + 1; 
        for(uint i = 1; i< month; i++)
        {
            sum = sum + daysinmnt(i,year);
        }
        sum = sum + date;
        return sum;
    }
    
    
    function timestamp_to_days(uint y) pure private returns (uint){
        return y/(24*60*60) + 1;
    } 
    
       function threetoone(uint day, uint month, uint year) pure private returns (uint){
        return (year*10000 + month*100 + day);
    }
    
    function vacancy(uint day, uint month, uint year) view public returns (bool){ 
        uint _datetobook = threetoone(day,month,year);
        if (perday[_datetobook]<100)
            return true;
        else
            return false;
    }
    
    function between(uint day, uint month, uint year) view private returns (uint){ 
         uint current = block.timestamp;
         uint currentday = timestamp_to_days(current);
         uint futureday = num_of_days(year,month,day);
         return futureday - currentday;
    }
    
    
    function bookandpay(uint day, uint month, uint year) public payable{  
        require(has_cancelled[msg.sender]==0, "You can only book one room in your name");
        uint _datetobook = threetoone(day,month,year);
        require(vacancy(day,month,year)==true,"There are no vacant rooms");
        require(msg.value==rf,"You didnt pay the required amount");
        balance[msg.sender]=rf;
        perday[_datetobook]++;
        has_cancelled[msg.sender]=1;
        emit reg(msg.sender,day,month,year);
    }
    
    function cancel(uint day, uint month, uint year) public{ 
        require(has_cancelled[msg.sender]==1,"You have already cancelled you reg");
        uint daysbwt = between(day,month,year);
        if(daysbwt>7)
            payable(msg.sender).transfer(balance[msg.sender]);
        else if(daysbwt>2)
            payable(msg.sender).transfer(balance[msg.sender]*c7/100);
        else if(daysbwt<=2)
            payable(msg.sender).transfer(balance[msg.sender]*c2/100);
        perday[threetoone(day,month,year)]--;
        balance[msg.sender] = 0;
        emit can(msg.sender,day,month,year);
        has_cancelled[msg.sender]=0;
    }
    
    function change_rf(uint p) public{
        require(msg.sender==owner,"YOU CAN NOT CHANGE THE REGISTRATION FEE SORRY");
        rf = p;
    }
    
    function change_c7(uint q) public{ 
        require(msg.sender==owner,"YOU CAn not channge the cancellation fee");
        c7 = q;
    }
    
    function change_c2(uint r) public{ 
        require(msg.sender==owner,"YOU CAN NOT CHANGE THE CANCELLATION FEE");
        c2 = r;
    }

}
